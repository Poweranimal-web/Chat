# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import builtins
import os
import sys
import time
import json
from twisted.internet import task, protocol
from twisted.protocols.basic import FileSender
from twisted import protocols
from twisted.internet.protocol import ClientFactory, Protocol
from twisted.protocols.policies import TimeoutMixin
from twisted.internet.interfaces import IConsumer
from twisted.python import log
import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from emoji import emojize
import easygui
port = 9090
information_file = {}
file = []
fullfilename = []
name = []
user = []
bring_user = []
send_messege = {}
file_extension = []
file_size = []
sum_data = 0
# size = 60000
registered = False
showclient = False
write = False
get_mess = False
transport_message = False
transport_file = False
Add_widget = False
tm = time.time()
inf = {}
message = {}
class Ui_MainWindow1(object):
        def conn(self):
            self.ui = Ui_MainWindow()
            self.ui.setupUi(MainWindow)
        def setupUi(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(430, 429)
            MainWindow.setStyleSheet("background-color: rgb(255, 255, 255)")
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.pushButton = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton.setEnabled(True)
            self.pushButton.setGeometry(QtCore.QRect(80, 330, 271, 41))
            font = QtGui.QFont()
            font.setFamily("Copperplate Gothic Bold")
            self.pushButton.setFont(font)
            self.pushButton.setStyleSheet("QPushButton{\n"
    "background-color:rgb(85, 0, 255);\n"
    "border-top-left-radius: 10%;\n"
    "border-top-right-radius: 10%;\n"
    "border-bottom-left-radius: 10%;\n"
    "border-bottom-right-radius: 10%;\n"
    "}")
            self.pushButton.setObjectName("pushButton")
            self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_2.setGeometry(QtCore.QRect(-6, -8, 221, 131))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.pushButton_2.setFont(font)
            self.pushButton_2.setStyleSheet("QPushButton{\n"
    "border:0 px;\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}\n"
    "")
            self.pushButton_2.setObjectName("pushButton_2")
            self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_3.setGeometry(QtCore.QRect(214, -8, 221, 131))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.pushButton_3.setFont(font)
            self.pushButton_3.setStyleSheet("QPushButton{\n"
    "border: 0 px;\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}")
            self.pushButton_3.setObjectName("pushButton_3")
            self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
            self.checkBox.setGeometry(QtCore.QRect(110, 290, 91, 17))
            self.checkBox.setObjectName("checkBox")
            self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit.setGeometry(QtCore.QRect(110, 190, 241, 31))
            font = QtGui.QFont()
            font.setPointSize(14)
            self.lineEdit.setFont(font)
            self.lineEdit.setStyleSheet("QLineEdit{\n"
    "\n"
    "border-top-right-radius:10%;\n"
    "border-bottom-right-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "color:rgb(255, 255, 255);\n"
    "}")
            self.lineEdit.setObjectName("lineEdit")
            self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit_2.setGeometry(QtCore.QRect(110, 240, 241, 31))
            font = QtGui.QFont()
            font.setPointSize(14)
            self.lineEdit_2.setFont(font)
            self.lineEdit_2.setStyleSheet("QLineEdit{\n"
    "\n"
    "\n"
    "border-top-right-radius:10%;\n"
    "border-bottom-right-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "color: rgb(255, 255, 255);\n"
    "\n"
    "}")
            self.lineEdit_2.setObjectName("lineEdit_2")
            self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_4.setGeometry(QtCore.QRect(80, 190, 31, 31))
            self.pushButton_4.setStyleSheet("QPushButton{\n"
    "border-top-left-radius:10%;\n"
    "border-bottom-left-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("padlock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_4.setIcon(icon)
            self.pushButton_4.setObjectName("pushButton_4")
            self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_5.setGeometry(QtCore.QRect(80, 240, 31, 31))
            self.pushButton_5.setStyleSheet("QPushButton{\n"
    "border-top-left-radius:10%;\n"
    "border-bottom-left-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "}")
            self.pushButton_5.setIcon(icon)
            self.pushButton_5.setObjectName("pushButton_5")
            MainWindow.setCentralWidget(self.centralwidget)

            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)
            self.pushButton.setCheckable(True)
            self.pushButton.toggle()
            self.pushButton.clicked.connect(self.check)
            self.pushButton_3.clicked.connect(self.conn)
            self.lineEdit.setPlaceholderText('Enter your login:')
            self.lineEdit_2.setPlaceholderText('Enter your password:')
        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "Gusmes"))
            self.pushButton.setText(_translate("MainWindow", "login"))
            self.pushButton_2.setText(_translate("MainWindow", "Sing in"))
            self.pushButton_3.setText(_translate("MainWindow", "New account"))
            self.checkBox.setText(_translate("MainWindow", "Private Police"))
        def check(self):
            login = self.lineEdit.text()
            password = self.lineEdit_2.text()
            inf['login'] = login
            inf['password'] = password
            reactor.connectTCP('localhost', port,ClientChatFactory())
class Ui_MainWindow(object):
        def conn(self):
            self.ui = Ui_MainWindow1()
            self.ui.setupUi(MainWindow)
        def setupUi(self, MainWindow):
            self.main = MainWindow.setObjectName("MainWindow")
            MainWindow.resize(438, 418)
            MainWindow.setAcceptDrops(True)
            MainWindow.setStyleSheet("background-color:rgb(255, 255, 255);")
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.pushButton = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton.setGeometry(QtCore.QRect(-6, -8, 221, 131))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.pushButton.setFont(font)
            self.pushButton.setStyleSheet("QPushButton{\n"
    "\n"
    "border: 0 px;\n"
    "background-color: rgb(255, 255, 255);\n"
    "\n"
    "\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "\n"
    "}")
            self.pushButton.setObjectName("pushButton")
            self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_2.setGeometry(QtCore.QRect(214, -8, 231, 131))
            font = QtGui.QFont()
            font.setPointSize(15)
            self.pushButton_2.setFont(font)
            self.pushButton_2.setStyleSheet("QPushButton{\n"
    "\n"
    "border: 0 px;\n"
    "background-color: rgb(255, 255, 255);\n"
    "\n"
    "\n"
    "}\n"
    "\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}")
            self.pushButton_2.setObjectName("pushButton_2")
            self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
            self.checkBox.setGeometry(QtCore.QRect(90, 320, 91, 17))
            self.checkBox.setObjectName("checkBox")
            self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_3.setEnabled(True)
            self.pushButton_3.setGeometry(QtCore.QRect(80, 360, 271, 41))
            font = QtGui.QFont()
            font.setFamily("Copperplate Gothic Bold")
            self.pushButton_3.setFont(font)
            self.pushButton_3.setStyleSheet("QPushButton{\n"
    "background-color:rgb(85, 0, 255);\n"
    "border-top-left-radius: 10%;\n"
    "border-top-right-radius: 10%;\n"
    "border-bottom-left-radius: 10%;\n"
    "border-bottom-right-radius: 10%;\n"
    "}")
            self.pushButton_3.setObjectName("pushButton_3")
            self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit.setGeometry(QtCore.QRect(120, 170, 241, 31))
            font = QtGui.QFont()
            font.setPointSize(14)
            self.lineEdit.setFont(font)
            self.lineEdit.setStyleSheet("QLineEdit{\n"
    "\n"
    "border-top-right-radius:10%;\n"
    "border-bottom-right-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "color:rgb(255, 255, 255);\n"
    "}")
            self.lineEdit.setText("")
            self.lineEdit.setObjectName("lineEdit")
            self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit_2.setGeometry(QtCore.QRect(120, 220, 241, 31))
            font = QtGui.QFont()
            font.setPointSize(14)
            self.lineEdit_2.setFont(font)
            self.lineEdit_2.setStyleSheet("QLineEdit{\n"
    "\n"
    "border-top-right-radius:10%;\n"
    "border-bottom-right-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "color:rgb(255, 255, 255);\n"
    "}")
            self.lineEdit_2.setObjectName("lineEdit_2")
            self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit_3.setGeometry(QtCore.QRect(120, 270, 241, 31))
            font = QtGui.QFont()
            font.setPointSize(14)
            self.lineEdit_3.setFont(font)
            self.lineEdit_3.setStyleSheet("QLineEdit{\n"
    "\n"
    "border-top-right-radius:10%;\n"
    "border-bottom-right-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "color:rgb(255, 255, 255);\n"
    "}")
            self.lineEdit_3.setObjectName("lineEdit_3")
            self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_4.setGeometry(QtCore.QRect(90, 170, 31, 31))
            self.pushButton_4.setStyleSheet("QPushButton{\n"
    "border-top-left-radius:10%;\n"
    "border-bottom-left-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("padlock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_4.setIcon(icon)
            self.pushButton_4.setObjectName("pushButton_4")
            self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_5.setGeometry(QtCore.QRect(90, 220, 31, 31))
            self.pushButton_5.setStyleSheet("QPushButton{\n"
    "border-top-left-radius:10%;\n"
    "border-bottom-left-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "}")
            self.pushButton_5.setIcon(icon)
            self.pushButton_5.setObjectName("pushButton_5")
            self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_6.setGeometry(QtCore.QRect(90, 270, 31, 31))
            self.pushButton_6.setStyleSheet("QPushButton{\n"
    "border-top-left-radius:10%;\n"
    "border-bottom-left-radius:10%;\n"
    "background-color: rgb(85, 0, 255);\n"
    "}")
            self.pushButton_6.setIcon(icon)
            self.pushButton_6.setObjectName("pushButton_6")
            MainWindow.setCentralWidget(self.centralwidget)

            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)
            self.pushButton.clicked.connect(self.conn)
            self.lineEdit.setPlaceholderText('Enter your login:')
            self.lineEdit_2.setPlaceholderText('Enter your password:')
            self.lineEdit_3.setPlaceholderText('Repeat your password:')
            self.pushButton_3.setCheckable(True)
            self.pushButton_3.toggle()
            self.pushButton_3.clicked.connect(self.check)
        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "Gusmes"))
            self.pushButton.setText(_translate("MainWindow", "Sing in"))
            self.pushButton_2.setText(_translate("MainWindow", "New account"))
            self.checkBox.setText(_translate("MainWindow", "Private Police"))
            self.pushButton_3.setText(_translate("MainWindow", "login"))
        def check(self):
                login = self.lineEdit.text()
                password = self.lineEdit_2.text()
                repeat_password = self.lineEdit_3.text()
                inf['login'] = login
                inf['password'] = password
                inf['repeat_password'] = repeat_password
                if password == repeat_password:
                    reactor.connectTCP('localhost', port, ClientChatFactory2())
                else:
                    self.lineEdit_2.setStyleSheet("QLineEdit{"
                                                  "background-color: rgb(255, 0, 0);"
                                                  "}")
                    self.lineEdit_3.setStyleSheet("QLineEdit{"
                                                  "background-color: rgb(255, 0, 0);"
                                                  "}")

class InputBox(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(InputBox, self).__init__(parent)
        open_message = QtWidgets.QLabel("Enter Login:")
        self.txt = QtWidgets.QLineEdit()
        save = QtWidgets.QPushButton('add',   clicked=self.accept)
        cancel = QtWidgets.QPushButton('Cancel', clicked=self.reject)

        grid = QtWidgets.QGridLayout(self)
        grid.setSpacing(10)
        grid.addWidget(open_message, 0, 0)
        grid.addWidget(self.txt, 1, 0, 1, 2)
        grid.addWidget(save, 2, 0)
        grid.addWidget(cancel, 2, 1)
        self.setFixedSize(self.sizeHint())

    def save(self):
        value = self.txt.text()
        return value
class Ui_MainWindow2(object):
   def setupUi(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(879, 550)
            MainWindow.setStyleSheet("background-color: rgb(255, 255, 255)")
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.widget = QtWidgets.QWidget(self.centralwidget)
            self.widget.setGeometry(QtCore.QRect(240, 0, 641, 80))
            self.widget.setObjectName("widget")
            self.pushButton_5 = QtWidgets.QPushButton(self.widget)
            self.pushButton_5.setGeometry(QtCore.QRect(470, 10, 75, 51))
            self.pushButton_5.setStyleSheet("QPushButton{\n"
    "border:0px;\n"
    "\n"
    "\n"
    "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("phone-call.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_5.setIcon(icon)
            self.pushButton_5.setObjectName("pushButton_5")
            self.pushButton_6 = QtWidgets.QPushButton(self.widget)
            self.pushButton_6.setGeometry(QtCore.QRect(370, 10, 75, 51))
            self.pushButton_6.setStyleSheet("QPushButton{\n"
    "border:0px;\n"
    "\n"
    "\n"
    "}")
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("add-user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_6.setIcon(icon1)
            self.pushButton_6.setObjectName("pushButton_6")
            self.pushButton_3 = QtWidgets.QPushButton(self.widget)
            self.pushButton_3.setGeometry(QtCore.QRect(570, 10, 75, 61))
            self.pushButton_3.setStyleSheet("QPushButton{\n"
    "border:0px;\n"
    "\n"
    "\n"
    "}")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap("information.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_3.setIcon(icon2)
            self.pushButton_3.setObjectName("pushButton_3")
            self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_8.setGeometry(QtCore.QRect(230, 510, 61, 41))
            self.pushButton_8.setStyleSheet("QPushButton{\n"
    "border:0px;\n"
    "\n"
    "\n"
    "}")
            self.pushButton_8.setText("")
            icon3 = QtGui.QIcon()
            icon3.addPixmap(QtGui.QPixmap("file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_8.setIcon(icon3)
            self.pushButton_8.setObjectName("pushButton_8")
            self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_9.setGeometry(QtCore.QRect(290, 510, 61, 41))
            self.pushButton_9.setStyleSheet("QPushButton{\n"
    "border: 0 px;\n"
    "\n"
    "\n"
    "\n"
    "}")
            icon4 = QtGui.QIcon()
            icon4.addPixmap(QtGui.QPixmap("smile.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_9.setIcon(icon4)
            self.pushButton_9.setObjectName("pushButton_9")
            self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
            self.tabWidget.setGeometry(QtCore.QRect(0, 0, 221, 551))
            self.tabWidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
            self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
            self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
            self.tabWidget.setIconSize(QtCore.QSize(35, 66))
            self.tabWidget.setUsesScrollButtons(False)
            self.tabWidget.setDocumentMode(False)
            self.tabWidget.setTabsClosable(False)
            self.tabWidget.setMovable(False)
            self.tabWidget.setTabBarAutoHide(False)
            self.tabWidget.setObjectName("tabWidget")
            self.tab = QtWidgets.QWidget()
            self.tab.setObjectName("tab")
            self.listWidget_2 = QtWidgets.QListWidget(self.tab)
            self.listWidget_2.setGeometry(QtCore.QRect(0, 0, 216, 473))
            self.listWidget_2.setObjectName("listWidget_2")
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap("comment.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.tabWidget.addTab(self.tab, icon5, "")
            self.tab_3 = QtWidgets.QWidget()
            self.tab_3.setObjectName("tab_3")
            self.listWidget = QtWidgets.QListWidget(self.tab_3)
            self.listWidget.setGeometry(QtCore.QRect(0, 0, 216, 473))
            self.listWidget.setObjectName("listWidget")
            self.listWidget.itemClicked.connect(self.onClicked)
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap("user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.tabWidget.addTab(self.tab_3, icon6, "")
            self.tab_2 = QtWidgets.QWidget()
            self.tab_2.setObjectName("tab_2")
            self.pushButton = QtWidgets.QPushButton(self.tab_2)
            self.pushButton.setGeometry(QtCore.QRect(0, 150, 221, 31))
            font = QtGui.QFont()
            font.setFamily("Tahoma")
            font.setBold(True)
            font.setWeight(75)
            self.pushButton.setFont(font)
            self.pushButton.setStyleSheet("QPushButton{\n"
    "border:0 px;\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}\n"
    "")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap("customer-support.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton.setIcon(icon7)
            self.pushButton.setIconSize(QtCore.QSize(22, 29))
            self.pushButton.setCheckable(False)
            self.pushButton.setChecked(False)
            self.pushButton.setAutoRepeat(False)
            self.pushButton.setAutoExclusive(False)
            self.pushButton.setObjectName("pushButton")
            self.pushButton_2 = QtWidgets.QPushButton(self.tab_2)
            self.pushButton_2.setGeometry(QtCore.QRect(-6, 182, 231, 31))
            font = QtGui.QFont()
            font.setFamily("Tahoma")
            font.setBold(True)
            font.setWeight(75)
            self.pushButton_2.setFont(font)
            self.pushButton_2.setStyleSheet("QPushButton{\n"
    "border:0 px;\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}\n"
    "")
            icon8 = QtGui.QIcon()
            icon8.addPixmap(QtGui.QPixmap("technical-support.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_2.setIcon(icon8)
            self.pushButton_2.setIconSize(QtCore.QSize(28, 33))
            self.pushButton_2.setObjectName("pushButton_2")
            self.pushButton_4 = QtWidgets.QPushButton(self.tab_2)
            self.pushButton_4.setGeometry(QtCore.QRect(-6, 220, 231, 31))
            font = QtGui.QFont()
            font.setFamily("Tahoma")
            font.setBold(True)
            font.setWeight(75)
            self.pushButton_4.setFont(font)
            self.pushButton_4.setStyleSheet("QPushButton{\n"
    "border:0 px;\n"
    "}\n"
    ".QPushButton:hover{\n"
    "background-color:rgb(216, 216, 216);\n"
    "}\n"
    "")
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap("logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_4.setIcon(icon9)
            self.pushButton_4.setIconSize(QtCore.QSize(28, 33))
            self.pushButton_4.setObjectName("pushButton_4")
            icon10 = QtGui.QIcon()
            icon10.addPixmap(QtGui.QPixmap("menu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.tabWidget.addTab(self.tab_2, icon10, "")
            self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
            self.textEdit.setGeometry(QtCore.QRect(360, 501, 401, 51))
            self.textEdit.setObjectName("textEdit")
            self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_10.setGeometry(QtCore.QRect(770, 506, 41, 41))
            self.pushButton_10.setStyleSheet(".QPushButton{\n"
    "background-color:rgb(85, 0, 255);\n"
    "border-top-left-radius:20%;\n"
    "border-top-right-radius:20%;\n"
    "border-bottom-left-radius:20%;\n"
    "border-bottom-right-radius:20%;\n"
    "\n"
    "\n"
    "}")
            icon11 = QtGui.QIcon()
            icon11.addPixmap(QtGui.QPixmap("paper-plane.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_10.setIcon(icon11)
            self.pushButton_10.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_10.setObjectName("pushButton_10")
            self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_7.setGeometry(QtCore.QRect(830, 506, 41, 41))
            self.pushButton_7.setStyleSheet(".QPushButton{\n"
    "background-color:rgb(85, 0, 255);\n"
    "border-top-left-radius:20%;\n"
    "border-top-right-radius:20%;\n"
    "border-bottom-left-radius:20%;\n"
    "border-bottom-right-radius:20%;\n"
    "\n"
    "\n"
    "}")
            icon12 = QtGui.QIcon()
            icon12.addPixmap(QtGui.QPixmap("voice-message.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_7.setIcon(icon12)
            self.pushButton_7.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_7.setObjectName("pushButton_7")
            self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_11.setGeometry(QtCore.QRect(190, 0, 41, 71))
            self.pushButton_11.setStyleSheet("QPushButton{\n"
    "border:0px;\n"
    "\n"
    "\n"
    "}")
            self.pushButton_11.setIcon(icon1)
            self.pushButton_11.setObjectName("pushButton_11")
            # self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
            # self.plainTextEdit.setGeometry(QtCore.QRect(220, 80, 658, 421))
            # self.plainTextEdit.setReadOnly(True)
            # self.plainTextEdit.setObjectName("plainTextEdit")
            self.listWidget_3 = QtWidgets.QListWidget(self.centralwidget)
            self.listWidget_3.setGeometry(QtCore.QRect(220, 80, 658, 421))
            self.listWidget_3.setObjectName("listWidget_3")
            self.widget_2 = QtWidgets.QWidget(self.centralwidget)
            self.widget_2.setGeometry(QtCore.QRect(751, -1, 130, 551))
            self.widget_2.setObjectName("widget_2")
            self.label = QtWidgets.QLabel(self.widget_2)
            self.label.setGeometry(QtCore.QRect(26, 170, 61, 21))
            self.label.setObjectName("label")
            self.label_2 = QtWidgets.QLabel(self.widget_2)
            self.label_2.setGeometry(QtCore.QRect(27, 210, 47, 21))
            self.label_2.setObjectName("label_2")
            self.label_3 = QtWidgets.QLabel(self.widget)
            self.label_3.setGeometry(QtCore.QRect(80, 25, 61, 21))
            self.label_3.setObjectName("label_3")
            self.label_4 = QtWidgets.QLabel(self.centralwidget)
            self.label_4.setGeometry(QtCore.QRect(423, 20, 281, 91))
            font = QtGui.QFont()
            font.setPointSize(20)
            self.label_4.setFont(font)
            self.label_4.setAlignment(QtCore.Qt.AlignCenter)
            self.label_4.setObjectName("label_4")
            self.label_5 = QtWidgets.QLabel(self.centralwidget)
            self.label_5.setGeometry(QtCore.QRect(474, 120, 181, 41))
            font = QtGui.QFont()
            font.setPointSize(16)
            self.label_5.setFont(font)
            self.label_5.setAlignment(QtCore.Qt.AlignCenter)
            self.label_5.setObjectName("label_5")
            self.label_6 = QtWidgets.QLabel(self.centralwidget)
            self.label_6.setGeometry(QtCore.QRect(270, 238, 211, 181))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.label_6.setFont(font)
            self.label_6.setPixmap(QtGui.QPixmap("conversation.png"))
            self.label_6.setAlignment(QtCore.Qt.AlignCenter)
            self.label_6.setObjectName("label_6")
            self.label_7 = QtWidgets.QLabel(self.centralwidget)
            self.label_7.setGeometry(QtCore.QRect(260, 423, 231, 121))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.label_7.setFont(font)
            self.label_7.setTextFormat(QtCore.Qt.AutoText)
            self.label_7.setScaledContents(False)
            self.label_7.setAlignment(QtCore.Qt.AlignCenter)
            self.label_7.setWordWrap(True)
            self.label_7.setObjectName("label_7")
            self.label_8 = QtWidgets.QLabel(self.centralwidget)
            self.label_8.setGeometry(QtCore.QRect(226, 172, 651, 61))
            font = QtGui.QFont()
            font.setPointSize(27)
            font.setBold(False)
            font.setUnderline(False)
            font.setWeight(50)
            self.label_8.setFont(font)
            self.label_8.setAlignment(QtCore.Qt.AlignCenter)
            self.label_8.setWordWrap(True)
            self.label_8.setObjectName("label_8")
            self.label_9 = QtWidgets.QLabel(self.centralwidget)
            self.label_9.setGeometry(QtCore.QRect(620, 240, 211, 181))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.label_9.setFont(font)
            self.label_9.setPixmap(QtGui.QPixmap("call.png"))
            self.label_9.setAlignment(QtCore.Qt.AlignCenter)
            self.label_9.setObjectName("label_9")
            self.label_10 = QtWidgets.QLabel(self.centralwidget)
            self.label_10.setGeometry(QtCore.QRect(616, 432, 221, 111))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.label_10.setFont(font)
            self.label_10.setAlignment(QtCore.Qt.AlignCenter)
            self.label_10.setObjectName("label_10")
            MainWindow.setCentralWidget(self.centralwidget)
            self.retranslateUi(MainWindow)
            self.tabWidget.setCurrentIndex(0)
            self.emoji = QtWidgets.QScrollArea(self.centralwidget)
            self.emoji.setGeometry(QtCore.QRect(690, -1, 190, 551))
            self.emoji.setObjectName("emoji")
            self.emoji.setObjectName("emoji")
            self.pushButton_12 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_12.setGeometry(QtCore.QRect(15, 0, 51, 41))
            self.pushButton_12.setStyleSheet("QPushButton{\n"
                                          "\n"
                                          "border: 0;\n"
                                          "\n"
                                          "\n"
                                          "\n"
                                          "\n"
                                          "\n"
                                          "}")
            icon = QtGui.QIcon()
            icon.addPixmap(
                QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/001-suspicious-1.png"),
                QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_12.setIcon(icon)
            self.pushButton_12.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_12.setObjectName("pushButton_12")
            self.pushButton_13 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_13.setGeometry(QtCore.QRect(65, 0, 51, 41))
            self.pushButton_13.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon1 = QtGui.QIcon()
            icon1.addPixmap(
                QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/006-happy-14.png"),
                QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_13.setIcon(icon1)
            self.pushButton_13.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_13.setObjectName("pushButton_13")
            self.pushButton_14 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_14.setGeometry(QtCore.QRect(115, 0, 51, 41))
            self.pushButton_14.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(
                QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/022-laughing-2.png"),
                QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_14.setIcon(icon2)
            self.pushButton_14.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_14.setObjectName("pushButton_14")
            self.pushButton_15 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_15.setGeometry(QtCore.QRect(15, 40, 51, 41))
            self.pushButton_15.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon3 = QtGui.QIcon()
            icon3.addPixmap(
                QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/005-sweating.png"),
                QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_15.setIcon(icon3)
            self.pushButton_15.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_15.setObjectName("pushButton_15")
            self.pushButton_16 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_16.setGeometry(QtCore.QRect(65, 40, 51, 41))
            self.pushButton_16.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon4 = QtGui.QIcon()
            icon4.addPixmap(
                QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/058-crying-1.png"),
                QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_16.setIcon(icon4)
            self.pushButton_16.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_16.setObjectName("pushButton_16")
            self.pushButton_17 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_17.setGeometry(QtCore.QRect(115, 40, 51, 41))
            self.pushButton_17.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/020-cool-1.png"),
                            QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_17.setIcon(icon5)
            self.pushButton_17.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_17.setObjectName("pushButton_17")
            self.pushButton_18 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_18.setGeometry(QtCore.QRect(15, 80, 51, 41))
            self.pushButton_18.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/032-dead-2.png"),
                            QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_18.setIcon(icon6)
            self.pushButton_18.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_18.setObjectName("pushButton_18")
            self.pushButton_19 = QtWidgets.QPushButton(self.emoji)
            self.pushButton_19.setGeometry(QtCore.QRect(65, 80, 51, 41))
            self.pushButton_19.setStyleSheet("QPushButton{\n"
                                            "\n"
                                            "border: 0;\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "\n"
                                            "}")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/743191-smileys/png/027-sad-6.png"),
                            QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton_19.setIcon(icon7)
            self.pushButton_19.setIconSize(QtCore.QSize(30, 30))
            self.pushButton_19.setObjectName("pushButton_19")
            QtCore.QMetaObject.connectSlotsByName(MainWindow)
            self.pushButton_11.clicked.connect(self.add_user)
            self.pushButton_10.clicked.connect(self.bring_messege)
            self.textEdit.setPlaceholderText('write message')
            self.pushButton_3.setCheckable(True)
            self.pushButton_9.setCheckable(True)
            self.pushButton_3.clicked.connect(self.show_wid)
            self.pushButton_9.clicked.connect(self.show_wid2)
            self.pushButton_12.clicked.connect(self.smile1)
            self.pushButton_13.clicked.connect(self.smile2)
            self.pushButton_14.clicked.connect(self.smile3)
            self.pushButton_15.clicked.connect(self.smile4)
            self.pushButton_16.clicked.connect(self.smile5)
            self.pushButton_17.clicked.connect(self.smile6)
            self.pushButton_18.clicked.connect(self.smile7)
            self.pushButton_19.clicked.connect(self.smile8)
            self.pushButton_8.clicked.connect(self.open_windows_explorer)
            self.emoji.hide()
            self.widget_2.hide()
            self.label.hide()
            self.label_2.hide()
            self.listWidget_3.hide()
            self.textEdit.hide()
            self.widget.hide()
            self.pushButton_7.hide()
            self.pushButton_10.hide()
            self.pushButton_9.hide()
            self.pushButton_8.hide()
   # and a < size
   def show_file_in_chat2(self):
       global name
       global bring_user
       global write
       global send_messege
       global transport_message
       global transport_file
       global file
       global fullfilename
       global file_extension
       # widgetButton = QtWidgets.QPushButton()
       # self.label_11 = QtWidgets.QLabel(widgetButton)
       # self.label_11.setGeometry(QtCore.QRect(60, 20, 61, 31))
       # self.label_11.setAlignment(QtCore.Qt.AlignCenter)
       # self.label_11.setObjectName("label_11")
       # self.label_11.setText('HIIIIIIIIIIIIIII')
       # myQListWidgetItem = QtWidgets.QListWidgetItem()
       newButton = QtWidgets.QPushButton()
       listWidgetItem = QtWidgets.QListWidgetItem()
       listWidgetItem.setSizeHint(newButton.sizeHint())
       self.listWidget_3.setStyleSheet("QPushButton{"
                                       "background-color:green;"
                                       "width:100px;"
                                       "}")
       self.listWidget_3.addItem(listWidgetItem)
       self.listWidget_3.setItemWidget(listWidgetItem, newButton)
       # self.listWidget_3.setItemWidget(myQListWidgetItem, widgetButton)
   def open_windows_explorer(self):
        global transport_file
        global file
        global fullfilename
        global size
        global file_extension
        global  file_size
        word2 = self.listWidget_2.currentItem()
        b = word2.text()
        bring_user.append(b)
        input_file = easygui.fileopenbox(filetypes=["*.docx"])
        # Просмотреть размер файла две строчки
        transport_file = True
        if input_file == None:
            transport_file = False
            file.clear()
            file_extension.clear()
        else:
            statinfo = os.stat(input_file)
            a = statinfo.st_size
            file_size.append(a)
            base = os.path.basename(input_file)
            enlargement = os.path.splitext(base)[1]
            print(enlargement)
            file_extension.append(enlargement)
            file.append(base)
            fullfilename.append(input_file)
            reactor.connectTCP('localhost', port, ClientChatFactory7())
   def smile1(self):
       self.textEdit.append('\U0001f928')
   def smile2(self):
       self.textEdit.append('\U0001F604')
   def smile3(self):
       self.textEdit.append('\U0001F923')
   def smile4(self):
       self.textEdit.append('\U0001F605')
   def smile5(self):
       self.textEdit.append('\U0001F62D')
   def smile6(self):
       self.textEdit.append('\U0001F60E')
   def smile7(self):
       self.textEdit.append('\U0001F635')
   def smile8(self):
       self.textEdit.append('\U0001F622')
   def show_wid2(self):
       if self.pushButton_9.isChecked():
           self.emoji.show()
           self.label_3.setGeometry(QtCore.QRect(80, 25, 61, 21))
           self.pushButton_6.setGeometry(QtCore.QRect(180, 10, 75, 51))
           self.pushButton_5.setGeometry(QtCore.QRect(280, 10, 75, 51))
           self.pushButton_3.setGeometry(QtCore.QRect(380, 10, 75, 51))
           self.widget.setGeometry(QtCore.QRect(240, 0, 470, 80))
           self.listWidget_3.setGeometry(QtCore.QRect(220, 80, 470, 421))
           self.textEdit.setGeometry(QtCore.QRect(360, 501, 200, 51))
           self.pushButton_10.setGeometry(QtCore.QRect(570, 506, 41, 41))
           self.pushButton_7.setGeometry(QtCore.QRect(625, 506, 41, 41))
       else:
           self.emoji.hide()
           self.label_3.setGeometry(QtCore.QRect(80, 25, 61, 21))
           self.pushButton_6.setGeometry(QtCore.QRect(370, 10, 75, 51))
           self.pushButton_5.setGeometry(QtCore.QRect(470, 10, 75, 51))
           self.pushButton_3.setGeometry(QtCore.QRect(570, 10, 75, 51))
           self.widget.setGeometry(QtCore.QRect(240, 0, 641, 80))
           self.listWidget_3.setGeometry(QtCore.QRect(220, 80, 658, 421))
           self.textEdit.setGeometry(QtCore.QRect(360, 501, 401, 51))
           self.pushButton_10.setGeometry(QtCore.QRect(770, 506, 41, 41))
           self.pushButton_7.setGeometry(QtCore.QRect(830, 506, 41, 41))
   def add_user(self):
        global id_button
        global count
        global user
        input_box = InputBox()
        input_box.setWindowTitle("InputBox Dialog")
        if input_box.exec_() == QtWidgets.QDialog.Accepted:
            self.val = input_box.save()
            user.append(self.val)
            reactor.connectTCP('localhost', port, ClientChatFactory4())
   def onClicked(self, item):
            self.word = item.text()
            self.find = self.listWidget_2.findItems(self.word,PyQt5.QtCore.Qt.MatchContains)
            if len(self.find) > 0:
                pass
            else:
                self.listWidget_2.addItem(self.word)
                self.listWidget_2.clicked.connect(self.open_chat)
   def bring_messege(self):
       global bring_user
       global send_messege
       global transport_message
       word2 = self.listWidget_2.currentItem()
       b = word2.text()
       bring_user.append(b)
       message_send = self.textEdit.toPlainText()
       send_messege['messege'] = message_send
       transport_message = True
       reactor.connectTCP('localhost', port, ClientChatFactory5())
   def open_chat(self):
       self.label.show()
       self.label_2.show()
       self.listWidget_3.show()
       self.textEdit.show()
       self.widget.show()
       self.pushButton_7.show()
       self.pushButton_10.show()
       self.pushButton_9.show()
       self.pushButton_8.show()
       self.label_4.hide()
       self.label_5.hide()
       self.label_6.hide()
       self.label_7.hide()
       self.label_8.hide()
       self.label_9.hide()
       self.label_10.hide()
       self.word1 = self.listWidget_2.currentItem()
       self.label_3.setText(self.word1.text())
   def show_wid(self):
        if self.pushButton_3.isChecked():
            self.widget_2.show()
            self.label.show()
            self.label_2.show()
            self.label_3.setGeometry(QtCore.QRect(80, 25, 61, 21))
            self.pushButton_6.setGeometry(QtCore.QRect(180, 10, 75, 51))
            self.pushButton_5.setGeometry(QtCore.QRect(280, 10, 75, 51))
            self.pushButton_3.setGeometry(QtCore.QRect(380, 10, 75, 51))
            self.widget.setGeometry(QtCore.QRect(240, 0, 511, 80))
            self.listWidget_3.setGeometry(QtCore.QRect(220, 80, 531, 421))
            self.textEdit.setGeometry(QtCore.QRect(360, 501, 271, 51))
            self.pushButton_10.setGeometry(QtCore.QRect(640, 506, 41, 41))
            self.pushButton_7.setGeometry(QtCore.QRect(690, 506, 41, 41))
        else:
            self.widget_2.hide()
            self.label.hide()
            self.label_2.hide()
            self.label_3.setGeometry(QtCore.QRect(80, 25, 61, 21))
            self.pushButton_6.setGeometry(QtCore.QRect(370, 10, 75, 51))
            self.pushButton_5.setGeometry(QtCore.QRect(470, 10, 75, 51))
            self.pushButton_3.setGeometry(QtCore.QRect(570, 10, 75, 51))
            self.widget.setGeometry(QtCore.QRect(240, 0, 641, 80))
            self.listWidget_3.setGeometry(QtCore.QRect(220, 80, 658, 421))
            self.textEdit.setGeometry(QtCore.QRect(360, 501, 401, 51))
            self.pushButton_10.setGeometry(QtCore.QRect(770, 506, 41, 41))
            self.pushButton_7.setGeometry(QtCore.QRect(830, 506, 41, 41))
   def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Gusmes"))
        self.pushButton.setText(_translate("MainWindow", "Settings"))
        self.pushButton_2.setText(_translate("MainWindow", "Support"))
        self.pushButton_4.setText(_translate("MainWindow", "Log Out"))
        self.label.setText(_translate("MainWindow", "number"))
        self.label_2.setText(_translate("MainWindow", "name"))
        self.label_3.setText(_translate("MainWindow", "name"))
        self.label_4.setText(_translate("MainWindow", "Welcome!"))
        self.label_5.setText(_translate("MainWindow", "name"))
        self.label_7.setText(_translate("MainWindow", "Write messages your friends.No limits!!"))
        self.label_8.setText(_translate("MainWindow", "     First you can try:"))
        self.label_10.setText(_translate("MainWindow", "Free calling"))
class Auth(Protocol):
        def __init__(self):
            self.ui1 = Ui_MainWindow()
            self.ui1.setupUi(MainWindow)
            self.ui = Ui_MainWindow1()
            self.ui.setupUi(MainWindow)
        def connectionMade(self):
            print('connected')
        def dataReceived(self, data):
                global check
                global name
                global registered
                global data_auth
                global inf
                get_data = data.decode('utf-8')
                get_data_in_dict = json.loads(get_data)
                login = inf['login']
                password = inf['password']
                name.append(inf['login'])
                data_auth = {}
                data_auth['set'] = 'auth'
                data_auth['login'] = login
                data_auth['password'] = password
                send_data_auth = json.dumps(data_auth)
                send_data_auth_utf = send_data_auth.encode('utf-8')
                self.transport.write(send_data_auth_utf)
                if get_data_in_dict['set'] == 'auth':
                        MainWindow.hide()
                        print('Welcome', inf['login'])
                        self.transport.loseConnection()
                        reactor.connectTCP('localhost', port, ClientChatFactory3())
                elif get_data_in_dict['set'] == 'no auth':
                    self.ui.lineEdit.setStyleSheet("background-color: red;"
                                                   "border-top-right-radius:10%;"
                                                   "border-bottom-right-radius:10%;")
                    self.ui.lineEdit_2.setStyleSheet("background-color: red;"
                                                      "border-top-right-radius:10%;"
                                                      "border-bottom-right-radius:10%;")
        def connectionLost(self, reason):
                print('disconnected, reason:', reason)
class Reg(Protocol):
    def __init__(self):
        self.ui1 = Ui_MainWindow()
        self.ui1.setupUi(MainWindow)
        self.ui = Ui_MainWindow1()
        self.ui.setupUi(MainWindow)
    def connectionMade(self):
        print('connected')
    def dataReceived(self, data):
        global check
        global name
        global registered
        global data_auth
        global inf
        get_data2 = data.decode('utf-8')
        get_data_in_dict2 = json.loads(get_data2)
        login = inf['login']
        password = inf['password']
        name.append(inf['login'])
        data_reg = {}
        data_reg['set'] = 'registr'
        data_reg['login'] = login
        data_reg['password'] = password
        send_data_reg = json.dumps(data_reg)
        send_data_reg_utf = send_data_reg.encode('utf-8')
        self.transport.write(send_data_reg_utf)
        if get_data_in_dict2['set'] == 'auth':
            MainWindow.hide()
            print('Welcome', inf['login'])
            self.transport.loseConnection()
            reactor.connectTCP('localhost', port, ClientChatFactory3())
        elif get_data_in_dict2['set'] == 'no auth':
            self.ui.lineEdit.setStyleSheet("background-color: red;"
                                           "border-top-right-radius:10%;"
                                           "border-bottom-right-radius:10%;")
            self.ui.lineEdit_2.setStyleSheet("background-color: red;"
                                             "border-top-right-radius:10%;"
                                             "border-bottom-right-radius:10%;")

    def connectionLost(self, reason):
        print('disconnected, reason:', reason)
class GetMessages(Protocol):
    def connectionMade(self):
        print('Get message connected')
    def dataReceived(self, data):
        global showclient
        global registered
        global write
        global get_mess
        global Add_widget
        get_data3 = data.decode('utf-8')
        get_data_in_dict3 = json.loads(get_data3)
        request = {}
        login_in_string = ''.join(name[0])
        request['nick'] = login_in_string
        request['set'] = 'Get'
        request_string = json.dumps(request)
        request_utf = request_string.encode('utf-8')
        self.transport.write(request_utf)
        reactor.connectTCP('localhost', port, ClientChatFactory6())
        if registered == False:
                self.ui2 = Ui_MainWindow2()
                self.ui2.setupUi(MainWindow)
                MainWindow.show()
                registered = True
        elif showclient == True:
                showclient = False
                self.add_user2()
        elif write == True:
                write = False
                self.bring_messege2()
        elif Add_widget == True:
            Add_widget = False
            self.ui2.show_file_in_chat2()
        elif get_data_in_dict3['set'] == 'no mesg':
                    pass
        elif get_data_in_dict3['set'] == 'GET':
                    del get_data_in_dict3['set']
                    for key,value in get_data_in_dict3.items():
                        get_mess = True
                        message = ''.join(value)
                        self.add_mess(message)
    def add_mess(self, message):
        myQListWidgetItem = QtWidgets.QListWidgetItem(message)
        self.ui2.listWidget_3.setStyleSheet("QListWidget::item{\n"
                                      "border:0;"
                                      "width:0px;"
                                      "}"
                                      "QListWidget::item:selected{\n"
                                      "color:black;"
                                      "border: 0;"
                                      "width:0px;"
                                      "}"
                                      )
        self.ui2.listWidget_3.setFocusPolicy(QtCore.Qt.NoFocus)
        self.ui2.listWidget_3.addItem(myQListWidgetItem)
    def add_user2(self):
        global user
        added_user = ''.join(user)
        self.ui2.listWidget.addItem(added_user)
        user.pop()
    def bring_messege2(self):
        message_send = self.ui2.textEdit.toPlainText()
        myQListWidgetItem = QtWidgets.QListWidgetItem(message_send)
        self.ui2.listWidget_3.setStyleSheet("QListWidget::item{\n"
                                      "border:0;"
                                      "width:0px;"
                                      "}"
                                      "QListWidget::item:selected{\n"
                                      "color:black;"
                                      "border: 0;"
                                      "width:0px;"
                                      "}"
                                      )
        self.ui2.listWidget_3.setFocusPolicy(QtCore.Qt.NoFocus)
        self.ui2.listWidget_3.addItem(myQListWidgetItem)
        self.ui2.textEdit.clear()
    # def show_file_in_chat(self):
    #     self.ui2.show_file_in_chat2()
    def connectionLost(self, reason):
        print('disconected')
class SentMessages(Protocol):
    def connectionMade(self):
        print('Send message connected')
    def dataReceived(self, data):
        global name
        global bring_user
        global write
        global send_messege
        global transport_message
        get_data4 = data.decode('utf-8')
        get_data_in_dict4 = json.loads(get_data4)
        if get_data_in_dict4['set'] == 'Hello from server' and transport_message == True:
            data_sender = {}
            login = ''.join(name[0])
            recipient = ''.join(bring_user[0])
            data_sender['sender'] = login
            data_sender['receipient'] = recipient
            data_sender['set'] = 'write message'
            data_sender['message'] = send_messege['messege']
            message_in_string = json.dumps(data_sender)
            message_in_format_utf = message_in_string.encode('utf-8')
            self.transport.write(message_in_format_utf)
        elif get_data_in_dict4['set'] == 'bring':
            print('sent')
            print(send_messege)
            bring_user.clear()
            del send_messege['messege']
            write = True
            transport_message = False
    def connectionLost(self, reason):
        print('disconected')
class AddChat(Protocol):
    def connectionMade(self):
        print('Get message connected')
    def dataReceived(self, data):
        global user
        global showclient
        get_data5 = data.decode('utf-8')
        get_data_in_dict5 = json.loads(get_data5)
        b = ''.join(user)
        if get_data_in_dict5['set'] == 'Hello from server':
            ask_login = {}
            ask_login['user'] = b
            ask_login['set'] = 'find friend'
            ask_login_in_string = json.dumps(ask_login)
            ask_login_in_format_utf = ask_login_in_string.encode('utf-8')
            self.transport.write(ask_login_in_format_utf)
        elif get_data_in_dict5['set'] == 'OK':
                print('ADD Chat')
                showclient = True
        elif get_data_in_dict5['set'] == 'NO':
            print('no user')
            user.pop()
    def connectionLost(self, reason):
         print('disconected')
class GetFile(Protocol):
    def connectionMade(self):
        print('Get file connected')
        # log.startLogging(open(r'C:\Users\millioner\PycharmProjects\Chat\foo2.log', 'w'))
    def dataReceived(self, data):
        global name
        global information_file
        global sum_data
        global Add_widget
        try:
            get_data6 = data.decode('utf-8')
            get_data_in_dict6 = json.loads(get_data6)
        except builtins.UnicodeDecodeError:
            len_data = int(len(data))
            sum_data += len_data
            self.f = open(r'D:/Python/Files/%s' % information_file['filename'], 'ab')
            self.GetFile(file_data=data)
        else:
            if get_data_in_dict6['set'] == 'Hello from server':
                request = {}
                login = ''.join(name[0])
                request['dirs'] = login
                request['set'] = 'Check File'
                request_in_string = json.dumps(request)
                request_in_format_utf = request_in_string.encode('utf-8')
                self.transport.write(request_in_format_utf)
            elif get_data_in_dict6['set'] == 'no file':
                self.transport.loseConnection()
            elif get_data_in_dict6['set'] == 'no exist':
                self.transport.loseConnection()
            elif get_data_in_dict6['set'] == 'get':
                del get_data_in_dict6['set']
                information_file['filename'] = get_data_in_dict6['filename']
                information_file['size'] = get_data_in_dict6['size']
                request_on_transport_file = {}
                request_on_transport_file['set'] = 'transport file'
                login = ''.join(name[0])
                request_on_transport_file['dir'] = login
                request_on_transport_file_string = json.dumps(request_on_transport_file)
                print('file make')
                self.transport.write(request_on_transport_file_string.encode('utf-8'))
    def GetFile(self, file_data):
        global sum_data
        global Add_widget
        print('Get in Getfile')
        print(information_file['size'])
        print(sum_data)
        if sum_data == information_file['size']:
        #     # os.stat("D:/Python/Files/%s" % (information_file['filename'])).st_size
            self.f.write(file_data)
            sum_data = 0
            # Add_widget = True
            self.transport.loseConnection()
        #     request = {}
        #     request['set'] = 'OK'
        #     request['dir'] = ''.join(name[0])
        #     request_in_string = json.dumps(request)
        #     request_in_format_utf = request_in_string.encode('utf-8')
        #     self.transport.write(request_in_format_utf)
        else:
            self.f.write(file_data)
    def connectionLost(self, reason):
        try:
            self.f.close()
            print('disconected file')
        except builtins.AttributeError:
            pass
class SentFile(Protocol):
    def connectionMade(self):
        print('Sent file connected')
    def dataReceived(self, data):
        global name
        global bring_user
        global write
        global send_messege
        global transport_message
        global transport_file
        global file
        global fullfilename
        global file_extension
        global Add_widget
        global file_size
        try:
            get_data7 = data.decode('utf-8')
            get_data_in_dict7 = json.loads(get_data7)
        except json.decoder.JSONDecodeError:
            pass
        else:
            if get_data_in_dict7['set'] == 'get':
                print(fullfilename)
                print(file)
                print(bring_user)
                j = ''.join(fullfilename)
                if os.path.isfile(j):
                    self.file3 = open(j, 'rb')
                    data2 = self.file3.read()
                    print(len(data2))
                    if data2:
                        print('length of  data ={}'.format(len(data2)))
                        # Add_widget = True
                        self.file3.close()
                        self.transport.write(data2)
                        self.transport.loseConnection()
                        fullfilename.clear()
                        file.clear()
                        bring_user.clear()
                        file_extension.clear()
                        transport_file = False
                    else:
                        self.transport.loseConnection()
                else:
                    self.transport.loseConnection()
            elif get_data_in_dict7['set'] == 'Hello from server' and transport_file == True:
                data_file = {}
                fullfilename_q = ''.join(fullfilename)
                login = ''.join(name[0])
                recipient = ''.join(bring_user)
                relative_file_path = ''.join(file)
                extension = ''.join(file_extension)
                if extension == '.png':
                    data_file['set'] = 'bring file2'
                    data_file['sender'] = login
                    data_file['receipient'] = recipient
                    data_file['file_extension'] = extension
                    data_file['filename'] = relative_file_path
                    data_file['fullfilename'] = fullfilename_q
                    data_file['filesize'] = int(file_size[0])
                    # filesender.beginFileTransfer(data, self.transport)
                    data_file_string2 = json.dumps(data_file)
                    data_file_format_utf2 = data_file_string2.encode('utf-8')
                    self.transport.write(data_file_format_utf2)
                elif extension == '.jpg':
                    data_file['set'] = 'bring file2'
                    data_file['sender'] = login
                    data_file['receipient'] = recipient
                    data_file['file_extension'] = extension
                    data_file['filename'] = relative_file_path
                    data_file['fullfilename'] = fullfilename_q
                    data_file['filesize'] = int(file_size[0])
                    # filesender.beginFileTransfer(data, self.transport)
                    data_file_string2 = json.dumps(data_file)
                    data_file_format_utf2 = data_file_string2.encode('utf-8')
                    self.transport.write(data_file_format_utf2)
                elif extension == '.jpeg':
                    data_file['set'] = 'bring file2'
                    data_file['sender'] = login
                    data_file['receipient'] = recipient
                    data_file['file_extension'] = extension
                    data_file['filename'] = relative_file_path
                    data_file['fullfilename'] = fullfilename_q
                    data_file['filesize'] = int(file_size[0])
                    # filesender.beginFileTransfer(data, self.transport)
                    data_file_string2 = json.dumps(data_file)
                    data_file_format_utf2 = data_file_string2.encode('utf-8')
                    self.transport.write(data_file_format_utf2)
                elif extension == '.pdf':
                    data_file['set'] = 'bring file2'
                    data_file['sender'] = login
                    data_file['receipient'] = recipient
                    data_file['file_extension'] = extension
                    data_file['filename'] = relative_file_path
                    data_file['fullfilename'] = fullfilename_q
                    data_file['filesize'] = file_size
                    data_file_string2 = json.dumps(data_file)
                    data_file_format_utf2 = data_file_string2.encode('utf-8')
                    self.transport.write(data_file_format_utf2)
                else:
                    with open(fullfilename_q, 'r') as wfile2:
                        data = wfile2.read()
                        print(data)
                        data_file['set'] = 'bring file'
                        data_file['sender'] = login
                        data_file['receipient'] = recipient
                        data_file['datafile'] = data
                        data_file['filename'] = relative_file_path
                        data_file['fullfilename'] = fullfilename_q
                        data_file['filesize'] = file_size
                        # filesender.beginFileTransfer(data, self.transport)
                        data_file_string2 = json.dumps(data_file)
                        data_file_format_utf2 = data_file_string2.encode('utf-8')
                        self.transport.write(data_file_format_utf2)
                        file.clear()
                        bring_user.clear()
    # def show_file_in_chat(self):
    #     global name
    #     global bring_user
    #     global write
    #     global send_messege
    #     global transport_message
    #     global transport_file
    #     global file
    #     global fullfilename
    #     global file_extension
    #     my_login = ''.join(name[0])
    #     relative_file_path = ''.join(file)
    #     # self.ui2.frame = QtWidgets.QFrame()
    #     # self.ui2.pushButton_20 = QtWidgets.QPushButton()
    #     # # self.ui2.pushButton_20.setGeometry(QtCore.QRect(0, 0, 61, 61))
    #     # self.ui2.pushButton_20.setStyleSheet("QPushButton{\n"
    #     #                                      "background-color:white;\n"
    #     #                                      "border:0px;\n"
    #     #                                      "\n"
    #     #                                      "\n"
    #     #                                      "\n"
    #     #                                      "\n"
    #     #                                      "}")
    #     # icon = QtGui.QIcon()
    #     # icon.addPixmap(QtGui.QPixmap("C:/Users/millioner/PycharmProjects/Chat/open_file2.png"), QtGui.QIcon.Normal,
    #     #                QtGui.QIcon.Off)
    #     # self.ui2.pushButton_20.setIcon(icon)
    #     # self.ui2.pushButton_20.setIconSize(QtCore.QSize(40, 50))
    #     # self.ui2.pushButton_20.setObjectName("pushButton_20")
    #     # # self.ui2.frame.setGeometry(QtCore.QRect(130, 120, 121, 61))
    #     # myQListWidgetItem.setSizeHint(QtCore.QSize(0,61))
    #     # myQListWidgetItem.setStyleSheet("QFrame{\n"
    #     #                          "background-color:black;\n"
    #     #                          "\n"
    #     #                          "\n"
    #     #                          "\n"
    #     #                          "\n"
    #     #                          "}")
    #     # myQListWidgetItem.setFrameShape(QtWidgets.QFrame.StyledPanel)
    #     # myQListWidgetItem.setFrameShadow(QtWidgets.QFrame.Raised)
    #     # myQListWidgetItem.setObjectName("frame")
    #     # self.ui2.label_12 = QtWidgets.QLabel(myQListWidgetItem)
    #     # self.ui2.label_12.setGeometry(QtCore.QRect(74, 5, 31, 16))
    #     # self.ui2.label_12.setAlignment(QtCore.Qt.AlignCenter)
    #     # self.ui2.label_12.setObjectName("label_2")
    #     # self.ui2.label_11.setText(relative_file_path)
    #     # self.ui2.label_12.setText(my_login)
    #     # widgetButton = QtWidgets.QPushButton("Push Me")
    #     # myQListWidgetItem = QtWidgets.QListWidgetItem()
    #     # myQListWidgetItem.setSizeHint(QtCore.QSize(0,61))
    #     # self.ui2.listWidget_3.addItem(myQListWidgetItem)
    #     # self.ui2.listWidget_3.setItemWidget(myQListWidgetItem,widgetButton)
    #     # fullfilename.clear()
    #     # file.clear()
    #     # bring_user.clear()
    #     # file_extension.clear()
    #     # transport_file = False
    def connectionLost(self, reason):
        print('disconected')
class ClientChatFactory(ClientFactory):
        def startedConnecting(self, connector):
            print('connect..')
        def buildProtocol(self, addr):
            return Auth()
        def clientConnectionFailed(self, connector, reason):
            print('ConnectionFailed, reason:', reason)
        def clientConnectionLost(self, connector, reason):
            print('ConnectionLost, reason:', reason)
class ClientChatFactory2(ClientFactory):
    def startedConnecting(self, connector):
        print('connect..')
    def buildProtocol(self, addr):
        return Reg()
    def clientConnectionFailed(self, connector, reason):
        print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
        print('ConnectionLost, reason:', reason)
class ClientChatFactory3(ClientFactory):
    def startedConnecting(self, connector):
        print('connect..')
    def buildProtocol(self, addr):
        return GetMessages()
    def clientConnectionFailed(self, connector, reason):
        print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
        print('ConnectionLost, reason:', reason)
class ClientChatFactory4(ClientFactory):
    def startedConnecting(self, connector):
        print('connect..')
    def buildProtocol(self, addr):
        return AddChat()
    def clientConnectionFailed(self, connector, reason):
        print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
        print('ConnectionLost, reason:', reason)
class ClientChatFactory5(ClientFactory):
    def startedConnecting(self, connector):
            print('connect..')
    def buildProtocol(self, addr):
            return SentMessages()
    def clientConnectionFailed(self, connector, reason):
            print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
            print('ConnectionLost, reason:', reason)
class ClientChatFactory6(ClientFactory):
    def startedConnecting(self, connector):
            print('connect..')
    def buildProtocol(self, addr):
            return GetFile()
    def clientConnectionFailed(self, connector, reason):
            print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
            print('ConnectionLost, reason:', reason)
class ClientChatFactory7(ClientFactory):
    def startedConnecting(self, connector):
            print('connect..')
    def buildProtocol(self, addr):
            return SentFile()
    def clientConnectionFailed(self, connector, reason):
            print('ConnectionFailed, reason:', reason)
    def clientConnectionLost(self, connector, reason):
            print('ConnectionLost, reason:', reason)
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    ui = Ui_MainWindow1()
    ui.setupUi(MainWindow)
    MainWindow.show()
    reactor.run()






